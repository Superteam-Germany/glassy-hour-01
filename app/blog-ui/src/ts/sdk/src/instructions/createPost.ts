/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category CreatePost
 * @category generated
 */
export type CreatePostInstructionArgs = {
  title: string;
  content: string;
};
/**
 * @category Instructions
 * @category CreatePost
 * @category generated
 */
export const createPostStruct = new beet.FixableBeetArgsStruct<
  CreatePostInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['title', beet.utf8String],
    ['content', beet.utf8String],
  ],
  'CreatePostInstructionArgs'
);
/**
 * Accounts required by the _createPost_ instruction
 *
 * @property [_writable_] userProfile
 * @property [_writable_] post
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category CreatePost
 * @category generated
 */
export type CreatePostInstructionAccounts = {
  userProfile: web3.PublicKey;
  post: web3.PublicKey;
  authority: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const createPostInstructionDiscriminator = [
  123, 92, 184, 29, 231, 24, 15, 202,
];

/**
 * Creates a _CreatePost_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreatePost
 * @category generated
 */
export function createCreatePostInstruction(
  accounts: CreatePostInstructionAccounts,
  args: CreatePostInstructionArgs,
  programId = new web3.PublicKey('F76mQ6wUu1sq4zkEuACCAWLD9E6EJd66BfokCzWDwHWo')
) {
  const [data] = createPostStruct.serialize({
    instructionDiscriminator: createPostInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.userProfile,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.post,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
